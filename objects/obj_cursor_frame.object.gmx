<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cf_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constructor

//stop anim
image_speed = 0;

//init variables
min_dist = -1;
pid = 0; //parent id
dl_image_index = 0; //dashed line image index
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update search coord
var pd; //point direction between mouse and player

if(point_distance(global.player_id.x,global.player_id.y,mouse_x,mouse_y)&gt;global.C_MAX_DIST){
    pd = point_direction(global.player_id.x,global.player_id.y,mouse_x,mouse_y);
    x = global.player_id.x+lengthdir_x(global.C_MAX_DIST,pd);
    y = global.player_id.y+lengthdir_y(global.C_MAX_DIST,pd);
}
else{
    x = mouse_x;
    y = mouse_y;
}

//clear min dist data
min_dist = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_plane_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find min dist in-range target

if(image_index!=0) return undefined;
if(!is_array(other.angles)) return undefined;

var d = distance_to_object(other);

if(min_dist==-1 || d&lt;min_dist){
    pid.target_plane = other;
    min_dist = d;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw dotted line
var dist, rot, dot_ind, dot_pat, num_dots, dot_dist, d_pos, dot_spr;
if(scr_instance_exists(pid.target_plane)){ //snap to target
    dist = point_distance(global.player_id.x,global.player_id.y,pid.target_plane.x,pid.target_plane.y);
    rot = point_direction(global.player_id.x,global.player_id.y,pid.target_plane.x,pid.target_plane.y);
}
else{
    dist = point_distance(global.player_id.x,global.player_id.y,x,y);
    rot = point_direction(global.player_id.x,global.player_id.y,x,y);
}

dot_ind = clamp(dist/2 div global.DOT_DIST_MIN, 0, global.DOT_MAX);
dot_pat = ds_list_find_value(global.DOT_PATTERNS, dot_ind);
num_dots = ds_list_size(dot_pat);
dot_dist = dist / num_dots;

shader_set(shader_pal_swap);
texture_set_stage(pid.palette_ref, global.palette_texture);
shader_set_uniform_f(pid.row_ref, pid.rt_modifier);
//draw dotted steal trail
for(var i = 0; i &lt; num_dots; i++){
    var px, py;
    px = global.player_id.x+lengthdir_x(dot_dist*(i+0.5), rot);
    py = global.player_id.y+lengthdir_y(dot_dist*(i+0.5), rot);
    d_pos = scr_game_to_gui(px, py);
    switch(ds_list_find_value(dot_pat,i)){
        case "s":
            dot_spr = spr_steal_dotted_trail_s;
            break;
        case "m":
            dot_spr = spr_steal_dotted_trail_m;
            break;
        case "l":
            dot_spr = spr_steal_dotted_trail_l;
            break;
    }
    draw_sprite(dot_spr, 0, d_pos[0], d_pos[1]);
}
//OLD: draw eff link
//draw_sprite_general(eff_link,dl_image_index,0,0,dist,3,d_pos[0],d_pos[1],1,1,rot,c_white,c_white,c_white,c_white,1);
shader_reset();

//OLD: advance frame
//dl_image_index = (dl_image_index+1) mod sprite_get_number(eff_link);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw cursor frame
var d_pos;
shader_set(shader_pal_swap);
texture_set_stage(pid.palette_ref, global.palette_texture);
shader_set_uniform_f(pid.row_ref, pid.rt_modifier);
if(scr_instance_exists(pid.target_plane)){ //snap to target
    d_pos = scr_game_to_gui(pid.target_plane.x,pid.target_plane.y);
}
else{
    d_pos = scr_game_to_gui(x,y);
}
draw_sprite(sprite_index,image_index,d_pos[0],d_pos[1]);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skip drawing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
