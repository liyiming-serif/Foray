<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call dispose function
scr_plane_gc();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off plane shooting sprite

if(!is_rolling){
    sprite_index = spr_plane1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update weapon
scr_ship_update_wpn(sprite_width-sprite_xoffset-2,image_angle,gid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generic hit script

scr_plane_hit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_missile_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generic hit script

scr_plane_hit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop rolling

if(is_rolling &amp;&amp; roll_invuln==0){
    sprite_index = spr_plane1;
    image_speed = idle_anim_speed;
    is_rolling = false;
    roll_cooldown = max_roll_cooldown;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up abandoned planes
if(!has_pilot &amp;&amp; instance_number(obj_player_avatar)&lt;1){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw steal UI

if(is_array(angles) &amp;&amp; hp&gt;0 &amp;&amp; scr_instance_exists(global.player_id)){
    var ret_spr, sweep_spr, arrow_spr, d_pos;
    d_pos = scr_game_to_gui(x,y);
    
    if(!mouse_check_button(mb_right)){ //steal-mode not on = small reticle
        //Draw reticle sweep small
        sweep_spr = spr_steal_sweep_sm;
        
        shader_set(shader_angle);
        var sweep_ang = scr_plane_ui_get_angles(starting_angle, 
            degtorad(angle_difference(image_angle,0)));
        shader_set_uniform_f_array(steal_angles_ref, sweep_ang);
        var originx = sprite_get_xoffset(sweep_spr)/sprite_get_width(sweep_spr);
        var originy = sprite_get_yoffset(sweep_spr)/sprite_get_height(sweep_spr);
        shader_set_uniform_f(steal_origin_ref, originx, originy);
        var uvs = sprite_get_uvs(sweep_spr,sweep_img_ind);
        shader_set_uniform_f(steal_uvs_ref,uvs[0],uvs[3],1/(uvs[2]-uvs[0]),1/(uvs[1]-uvs[3]));
        draw_sprite(sweep_spr, sweep_img_ind, d_pos[0], d_pos[1]);
        shader_reset();
        
        sweep_img_ind = (sweep_img_ind+global.STEAL_SWEEP_ANIM_SPEED)%
            sprite_get_number(sweep_spr);
            
        //Draw reticle off at 1/2 scale
        ret_spr = spr_steal_reticle;
        draw_sprite_ext(ret_spr, reticle_img_ind,
            d_pos[0], d_pos[1], 0.5, 0.5,
            0,c_white,1);
        reticle_img_ind = (reticle_img_ind+global.STEAL_RETICLE_ANIM_SPEED)%
            sprite_get_number(ret_spr);
        
        //Draw arrow w/ closer origin
        arrow_spr = spr_steal_arrow;
        sprite_set_offset(arrow_spr, -26, sprite_get_yoffset(arrow_spr));
        draw_sprite_ext(arrow_spr,arrow_img_ind,
            d_pos[0],d_pos[1],1,1,
            radtodeg(starting_angle)+image_angle,c_white,1);
        arrow_img_ind = (arrow_img_ind+global.STEAL_ARROW_ANIM_SPEED)%
            sprite_get_number(arrow_spr);
    }
    else if(on_target){
        //Draw reticle sweep
        sweep_spr = spr_steal_sweep_on;

        shader_set(shader_angle);
        var sweep_ang = scr_plane_ui_get_angles(starting_angle, 
            degtorad(angle_difference(image_angle,0)));
        shader_set_uniform_f_array(steal_angles_ref, sweep_ang);
        var originx = sprite_get_xoffset(sweep_spr)/sprite_get_width(sweep_spr);
        var originy = sprite_get_yoffset(sweep_spr)/sprite_get_height(sweep_spr);
        shader_set_uniform_f(steal_origin_ref, originx, originy);
        var uvs = sprite_get_uvs(sweep_spr,sweep_img_ind);
        shader_set_uniform_f(steal_uvs_ref,uvs[0],uvs[3],1/(uvs[2]-uvs[0]),1/(uvs[1]-uvs[3]));
        draw_sprite(sweep_spr, sweep_img_ind, d_pos[0], d_pos[1]);
        shader_reset();
        
        sweep_img_ind = (sweep_img_ind+global.STEAL_SWEEP_ON_ANIM_SPEED)%
            sprite_get_number(sweep_spr);
            
        //Draw reticle active
        ret_spr = spr_steal_reticle_on;
        draw_sprite(ret_spr, reticle_img_ind, d_pos[0], d_pos[1]);
        reticle_img_ind = (reticle_img_ind+global.STEAL_RETICLE_ON_ANIM_SPEED)%
            sprite_get_number(ret_spr);
    }
    else{
        //Draw reticle sweep
        sweep_spr = spr_steal_sweep;
        
        shader_set(shader_angle);
        var sweep_ang = scr_plane_ui_get_angles(starting_angle, 
            degtorad(angle_difference(image_angle,0)));
        shader_set_uniform_f_array(steal_angles_ref, sweep_ang);
        var originx = sprite_get_xoffset(sweep_spr)/sprite_get_width(sweep_spr);
        var originy = sprite_get_yoffset(sweep_spr)/sprite_get_height(sweep_spr);
        shader_set_uniform_f(steal_origin_ref, originx, originy);
        var uvs = sprite_get_uvs(sweep_spr,sweep_img_ind);
        shader_set_uniform_f(steal_uvs_ref,uvs[0],uvs[3],1/(uvs[2]-uvs[0]),1/(uvs[1]-uvs[3]));
        draw_sprite(sweep_spr, sweep_img_ind, d_pos[0], d_pos[1]);
        shader_reset();
        
        sweep_img_ind = (sweep_img_ind+global.STEAL_SWEEP_ANIM_SPEED)%
            sprite_get_number(sweep_spr);
    
        //Draw reticle off
        ret_spr = spr_steal_reticle;
        draw_sprite(ret_spr, reticle_img_ind, d_pos[0], d_pos[1]);
        reticle_img_ind = (reticle_img_ind+global.STEAL_RETICLE_ANIM_SPEED)%
            sprite_get_number(ret_spr);
        
        //Draw steal arrow
        arrow_spr = spr_steal_arrow;
        sprite_set_offset(arrow_spr, -52, sprite_get_yoffset(arrow_spr));
        draw_sprite_ext(arrow_spr,arrow_img_ind,
            d_pos[0],d_pos[1],1,1,
            radtodeg(starting_angle)+image_angle,c_white,1);
        arrow_img_ind = (arrow_img_ind+global.STEAL_ARROW_ANIM_SPEED)%
            sprite_get_number(arrow_spr);
    }
}

scr_ship_draw_ui();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply shader
scr_plane_shade();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
