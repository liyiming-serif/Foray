<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZATION

//there can only be one.
if(instance_number(obj_control)&gt;1){
    instance_destroy(id,false);
}

randomize();

//LOAD JSONS
var f, raw;

//Ship and plane models + AI constants
f = file_text_open_read(working_directory + "\ships_planes.json");
raw = "";
while(!file_text_eof(f)){
    raw += file_text_read_string(f);
    file_text_readln(f);
}
file_text_close(f);
global.SHIPS_PLANES = json_decode(raw);

//Weapon fixures and projectiles
f = file_text_open_read(working_directory + "\wpns_bullets.json");
raw = "";
while(!file_text_eof(f)){
    raw += file_text_read_string(f);
    file_text_readln(f);
}
file_text_close(f);
global.WPNS_BULLETS = json_decode(raw);

//Design pattern components
f = file_text_open_read(working_directory + "\design_patterns.json");
raw = "";
while(!file_text_eof(f)){
    raw += file_text_read_string(f);
    file_text_readln(f);
}
file_text_close(f);
global.DESIGN_PATTERNS = json_decode(raw);

//PARSE JSONS
global.models = ds_map_find_value(global.SHIPS_PLANES, "models");
global.balloons = ds_map_find_value(global.SHIPS_PLANES, "balloons");
var stat_tiers = ds_map_find_value(global.SHIPS_PLANES, "stat_tiers");
global.speed_tiers = ds_map_find_value(stat_tiers, "speeds");
global.min_speed_tiers = ds_map_find_value(stat_tiers, "min_speeds");
global.max_speed_tiers = ds_map_find_value(stat_tiers, "max_speeds");
global.turn_tiers = ds_map_find_value(stat_tiers, "turns");
global.amr_tiers = ds_map_find_value(stat_tiers, "armors");
global.pilot_ai = ds_map_find_value(global.SHIPS_PLANES, "pilot_ai");
global.projectiles = ds_map_find_value(global.WPNS_BULLETS, "projectiles");
global.weapons = ds_map_find_value(global.WPNS_BULLETS, "weapons");
global.midflights = ds_map_find_value(global.WPNS_BULLETS, "midflights");
global.design_pattern_weights = ds_map_find_value(global.DESIGN_PATTERNS, "cb_weights");

//Unintiallized level json + metadata
global.curr_level_data = undefined;
global.curr_level_name = "";
global.next_level = "";
global.changing_levels = false;

//Initiallize fonts
global.fnt_4mini = font_add(working_directory + "\4mini.ttf",8,false,false,32,128);
global.fnt_westington_s = font_add(working_directory + "\Westington.ttf",12,true,false,32,128);
global.fnt_westington_m = font_add(working_directory + "\Westington.ttf",24,true,false,32,128);

//INITIALLIZE CONSTANTS
global.TURN_DAMPENER = 9; //how little turning reduces speed
global.C_TURN_DAMPENER = 0.25; //dampening factor when holding [C]
global.C_MAX_DIST = sprite_get_width(eff_link);
global.MAX_CAM_FOLLOW_DIST = 120;
global.PARALLAX_FACTOR = 0.75;
global.ACC_SPEED = 0.5;
global.BRAKE_SPEED = 0.05;
global.AIR_FRIC = 0.01;
global.DRIFT = 1.25;
global.ACC_DAMPENER = 1.25; //how little acc reduces turn
global.TURN_OUTSIDE_ROOM_COEFF = 2.5;
global.SPAWN_INVINCIBILITY = room_speed*1.5; //invincibility after swapping planes
global.JUMP_SPEED = 6;
global.C_RECOVERY = room_speed*0.18;
global.SMOKE_RATE = room_speed*0.3;
global.TRAIL_RATE = room_speed*0.25;
global.DMG_THRESHOLDS[0] = 0.75;
global.DMG_THRESHOLDS[1] = 0.50;
global.DMG_THRESHOLDS[2] = 0.25;
global.CONTACT_DMG = 2;
global.MIN_DMG = 0.5;
global.MAX_STATS = 3;
global.MAX_PROGRESS_RATE = 0.003/room_speed;
global.PROGRESS_RATE = 0.015/room_speed;
global.SWERVE_TURN_MOD = 1.5; //turning boost for AI avoiding obstacles

//UI CONSTANTS
global.C_TEXT = make_colour_rgb(108,102,142);
global.C_TEXT_SHADOW = make_colour_rgb(143,239,186);
global.C_TEXT_LIGHT = make_colour_rgb(235,255,140);
global.C_MAX_BAR = make_colour_rgb(107,255,192); //min-max colors for health bars
global.C_MIN_BAR = make_colour_rgb(0,181,156);
global.HBAR_X = 15;
global.HBAR_Y = 20;
global.PBAR_Y = 24;
global.ARROW_ANIM_SPEED = 0.3;
global.TUTORIAL_FADE_IN_RATE = 0.02;
global.TUTORIAL_FOLLOW_DIST = 72;
global.TUTORIAL_SCREEN_POS = 2/5;

//SCREEN FLASH CONSTS
global.C_FLASH_RED = make_colour_rgb(219,24,69);
global.flash_red_alpha = 0;
global.FLASH_RED_ALPHA_DECAY = 0.05;

//SCREEN SHAKE CONSTS
global.screen_shake_dist = 0;
global.screen_shake_time = 0;

//drawing shadows
global.VANISH_X = room_width/2;
global.VANISH_Y = -576;
global.SHADOW_DIST = 20;
global.C_SHADOW = make_colour_rgb(3,61,84);

//Audio Constants
audio_falloff_set_model(audio_falloff_linear_distance_clamped);
audio_listener_orientation(0,-1,0, 0,0,-1);
global.SOUND_FALLOFF_REF_DIST = 216; //these variables are bullshit
global.SOUND_FALLOFF_MAX_DIST = 888;
global.SOUND_FALLOFF_FACTOR = 1;
global.SOUND_PITCH_VARIANCE = 0.05;
global.SOUND_GAIN_VARIANCE = 0.2;
global.SOUND_PITCH_DAMPENER = 0.7;
global.SOUND_GAIN_DAMPENER = 0.5;
global.SOUND_BALLOON_PITCH_SHIFT = 1.5;
global.SOUND_BALLOON_GAIN_SHIFT = 0.4;
global.SOUND_SKYMINE_FALLOFF_REF_DIST = 120;
global.SOUND_SKYMINE_FALLOFF_MAX_DIST = 312;

//Gun Progress
global.max_progress = 0;
global.progress = 0;

//Pause
global.paused = false;
global.paused_prev = global.paused;
//Use to change movement speed while still animating at 60fps
global.game_speed = 1.0;
global.game_speed_prev = global.game_speed;
//SLOMO during stealing
global.SLOMO_RATE = 0.11; //ease into slomo
global.SLOMO_MIN = 0;

//shitty GML library doesn't move tiles by abs position
global.tiles_x = 0;
global.tiles_y = 0;

//player trackers
global.player_id = 0;
global.city_id = 0;

//controls
global.brake_key = ord('Z');
global.boost_key = ord('X');
global.options_key = ord('F');

//Set plane palettes
enum mk{ //TODO: add modifiers
    TINT_GREEN = 254,
    TINT_RED = 255
};

//Plane AI ENUMS
enum ai_states{
    CHASING,
    FIRING,
    FLEEING,
    AVOIDING,
    RELOADING
};

//ai difficulty modifiers
global.AI_TURN_REDUC = 0.7;
global.AI_SPEED_REDUC = 1;
global.AI_HP_REDUC = 1;
global.AI_SHOT_SP_REDUC = 0.6;
global.AI_SHOT_RANGE_REDUC = 0.9;
global.AI_SHOT_ACC_REDUC = 2.0;
global.AI_SHOT_RATE_REDUC = 1.6;

//shared spawn vars
global.spawn_cap = 0.0;
//HACK: drastically increase difficulty after endless
//by eliminating dmg scaling
global.is_endless = false;

//skymine spawn deferral
global.skymine_queue = ds_list_create();

//shielding states
enum shield_states{
    DOWN,
    GOING_UP,
    ANIM_UP,
    UP,
    GOING_DOWN,
    ANIM_DOWN
};

//alarm constants
global.AVOID_STATE_ALARM = 0;

//initiallize particle system + particles
global.partsys = part_system_create();
part_system_depth(global.partsys,-1);
global.partsys_ground = part_system_create();
part_system_depth(global.partsys_ground,9);

global.b1_miss = part_type_create();
part_type_sprite(global.b1_miss, eff_b1_miss, true, true, false);
part_type_life(global.b1_miss, room_speed*0.25, room_speed*0.3);

global.flare1 = part_type_create();
part_type_sprite(global.flare1, eff_flare1, true, true, false);
part_type_life(global.flare1, room_speed*0.1, room_speed*0.15);

global.deflect = part_type_create();
part_type_sprite(global.deflect, eff_deflect, true, true, false);
part_type_life(global.deflect, room_speed*0.25, room_speed*0.4);

global.hit1 = part_type_create();
part_type_sprite(global.hit1, eff_hit1, true, true, false);
part_type_life(global.hit1, room_speed*0.2, room_speed*0.25);

global.charge = part_type_create();
part_type_sprite(global.charge, eff_charge, true, true, false);
part_type_size(global.charge,0.5,1.5,0,0);

global.boom_air = part_type_create();
part_type_sprite(global.boom_air, eff_boom_air, true, true, false);
part_type_life(global.boom_air, room_speed*0.5, room_speed*0.6);

global.explosion = part_type_create();
part_type_sprite(global.explosion, eff_explosion, true, true, false);
part_type_life(global.explosion, room_speed*0.6, room_speed*0.8);

global.explosion_ground = part_type_create();
part_type_sprite(global.explosion_ground, eff_explosion_ground, true, true, false);
part_type_life(global.explosion_ground, room_speed*0.5, room_speed*0.6);

global.dmg_ind[0] = part_type_create();
part_type_sprite(global.dmg_ind[0], eff_smoke_lt, true, true, false);
part_type_life(global.dmg_ind[0], room_speed*0.3, room_speed*0.5);
part_type_size(global.dmg_ind[0], 0.75, 2, 0, 0);

global.dmg_ind[1] = part_type_create();
part_type_sprite(global.dmg_ind[1], eff_smoke_dk, true, true, false);
part_type_life(global.dmg_ind[1], room_speed*0.3, room_speed*0.5);
part_type_size(global.dmg_ind[1], 1, 2.25, 0, 0);

global.dmg_ind[2] = part_type_create();
part_type_sprite(global.dmg_ind[2], eff_smoke_fire, true, true, false);
part_type_life(global.dmg_ind[2], room_speed*0.4, room_speed*0.6);
part_type_size(global.dmg_ind[2], 0.8, 1.5, 0, 0);

global.trail_far = part_type_create();
part_type_sprite(global.trail_far, eff_trail_far, true, true, false);
part_type_life(global.trail_far, room_speed*0.4, room_speed*0.4);

//shader globals
global.palette_texture = background_get_texture(bg_palette);
global.is_meter_ref = shader_get_uniform(shader_wedge_flash, "isMeter");

//DISPLAY/RESOLUTION MANAGER 
global.IDEAL_WIDTH = 540;
global.IDEAL_HEIGHT = 360;
global.FULLSCREEN_WIDTH = 0; //calculated in init views
global.FULLSCREEN_HEIGHT = 0;
view_xprev = 0; //for smoothing resolution changes
view_yprev = 0;
scr_init_views();
scr_set_res(0);
window_set_cursor(cr_none);
scr_set_level("level1");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///garbage collection

//particles
part_system_destroy(global.partsys);
part_system_destroy(global.partsys_ground);
part_type_destroy(global.b1_miss);
part_type_destroy(global.flare1);
part_type_destroy(global.deflect);
part_type_destroy(global.hit1);
part_type_destroy(global.charge);
part_type_destroy(global.boom_air);
part_type_destroy(global.explosion);
part_type_destroy(global.dmg_ind[0]);
part_type_destroy(global.dmg_ind[1]);
part_type_destroy(global.dmg_ind[2]);
part_type_destroy(global.trail_far);

//top level data structures
ds_map_destroy(global.SHIPS_PLANES);
ds_map_destroy(global.WPNS_BULLETS);
ds_map_destroy(global.DESIGN_PATTERNS);
if(global.curr_level_name!=""){
    ds_map_destroy(global.curr_level_data);
}
ds_list_destroy(global.skymine_queue);

//fonts
font_delete(global.fnt_4mini);
font_delete(global.fnt_westington_s);
font_delete(global.fnt_westington_m);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle signal for level change
room_goto(asset_get_index("rm_"+global.next_level));
global.changing_levels = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pausing

if(global.paused){
    if(!global.paused_prev){
        global.game_speed_prev = global.game_speed;
    }
    global.game_speed = 0.0;
}
else{
    if(global.paused_prev){
        global.game_speed = global.game_speed_prev;
    }
    global.game_speed_prev = global.game_speed;
}

global.paused_prev = global.paused;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load level
if(global.changing_levels){
    scr_load_level(global.next_level);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///'F' to toggle fullscreen
if(keyboard_check_pressed(global.options_key)){
    if(window_get_fullscreen()){
        scr_set_res(2);
    }
    else{
        scr_set_res(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Follow Camera + Screen Shake

var vc = scr_view_current();

// Remain in front of the player object
if(scr_instance_exists(global.player_id) &amp;&amp; global.next_level == ""){
    var d, cam_x, cam_y,;
    with(global.player_id){
        if(object_index==obj_player){
            d = curr_speed-neutral_speed;
            cam_x = x+lengthdir_x(global.MAX_CAM_FOLLOW_DIST-16*sign(d)*sqr(d),direction);
            cam_y = y+lengthdir_y(global.MAX_CAM_FOLLOW_DIST-16*sign(d)*sqr(d),direction);
        }
        else{
            cam_x = x+lengthdir_x(global.MAX_CAM_FOLLOW_DIST,direction);
            cam_y = y+lengthdir_y(global.MAX_CAM_FOLLOW_DIST,direction);
        }
    }
    
    //Center on camera
    view_xview[vc]=lerp(view_xprev,cam_x-view_wview[vc]/2,0.05);
    view_yview[vc]=lerp(view_yprev,cam_y-view_hview[vc]/2,0.05);
    
    //clamp to room
    view_xview[vc]=clamp(view_xview[vc],0,room_width-view_wview[vc]);
    view_yview[vc]=clamp(view_yview[vc],0,room_height-view_hview[vc]);
}

//update prev cam pos
view_xprev = view_xview[vc];
view_yprev = view_yview[vc];

//apply screen shake
if(global.screen_shake_time &gt; 0){
    view_xview[vc] += random_range(-global.screen_shake_dist, global.screen_shake_dist);
    view_yview[vc] += random_range(-global.screen_shake_dist, global.screen_shake_dist);
}
else{
    global.screen_shake_dist = 0;
}
global.screen_shake_time = max(global.screen_shake_time-1, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio Listener to follow player
if(scr_instance_exists(global.player_id)){
    audio_listener_position(global.player_id.x,global.player_id.y,0);
    audio_listener_velocity(global.player_id.hspeed,global.player_id.vspeed,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lerp-parallax

var tiles_xprev, tiles_yprev, vc;

tiles_xprev = global.tiles_x;
tiles_yprev = global.tiles_y;

vc = scr_view_current();
global.tiles_x = lerp(0,room_width*(1-global.PARALLAX_FACTOR),view_xview[vc]/(room_width-view_wview[vc]));
global.tiles_y = lerp(0,room_height*(1-global.PARALLAX_FACTOR),view_yview[vc]/(room_height-view_hview[vc]));

tile_layer_shift(127, global.tiles_x-tiles_xprev, global.tiles_y-tiles_yprev);
tile_layer_shift(126, global.tiles_x-tiles_xprev, global.tiles_y-tiles_yprev);

//grounded particle system
part_system_position(global.partsys_ground, global.tiles_x, global.tiles_y);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update spawn cap; loop through enemies
global.spawn_cap = 0.0;
for(var i = 0; i &lt; instance_number(obj_ship_parent); i++){
    var s = instance_find(obj_ship_parent,i);
    if(!s.is_friendly){
        var t = variable_instance_get(s,"threat");
        if(t!=undefined){
            global.spawn_cap+=t;
        }
        
        //debuff enemy accuracy based on spawn cap
        if(variable_instance_exists(s,"accuracy")){
            s.accuracy = s.og_accuracy*(1+global.spawn_cap);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check+Update Defense Progress

//If progress is &lt; 0, game over state
if(global.progress &lt; 0){
    scr_set_level("level1");
}

if(global.progress &lt; global.max_progress){
    //city's been hit, so progress needs to catch up to max
    global.progress = clamp(global.progress+global.PROGRESS_RATE*global.game_speed,
                            0,
                            global.max_progress);
}
else{
    //move max progress along when all damage has been repaired
    global.max_progress = clamp(global.max_progress+global.MAX_PROGRESS_RATE*global.game_speed,
                                0,
                                1);
    global.progress = global.max_progress;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
