<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZATION

//there can only be one.
if(instance_number(obj_control)&gt;1){
    instance_destroy(id,false);
}

//Load JSONs
var f, raw;
f = file_text_open_read(working_directory + "\plane_models.json");
raw = "";
while(!file_text_eof(f)){
    raw += file_text_read_string(f);
    file_text_readln(f);
}
file_text_close(f);
//Parse JSONs
global.plane_models = json_decode(raw);
global.models = ds_map_find_value(global.plane_models, "models");
var stat_tiers = ds_map_find_value(global.plane_models, "stat_tiers");
global.speed_tiers = ds_map_find_value(stat_tiers, "speeds");
global.turn_tiers = ds_map_find_value(stat_tiers, "turns");
global.amr_tiers = ds_map_find_value(stat_tiers, "armors");
global.projectiles = ds_map_find_value(global.plane_models, "projectiles");
global.weapons = ds_map_find_value(global.plane_models, "weapons");
global.balloons = ds_map_find_value(global.plane_models, "balloons");

//Unintiallized level json + metadata
global.curr_level_data = undefined;
global.curr_level_name = "";
global.next_level = "";
global.changing_levels = false;

//INITIALLIZE CONSTANTS
global.TURN_DAMPENER = 4; //how little turning reduces speed
global.C_TURN_DAMPENER = 0.25; //dampening factor when holding [C]
global.MAX_CAM_FOLLOW_DIST = 120;
global.PARALLAX_FACTOR = 0.8;
global.ACC_SPEED = 0.5;
global.BRAKE_SPEED = 0.05;
global.AIR_FRIC = 0.01;
global.DRIFT = 1.25;
global.ACC_DAMPENER = 1.25; //how little acc reduces turn
global.ACHY_VARIANCE = 0.05;
global.SPAWN_INVINCIBILITY = room_speed*2; //invincibility after swapping planes
global.JUMP_SPEED = 6;
global.C_RECOVERY = room_speed*0.18;
global.SMOKE_RATE = room_speed*0.3;
global.TRAIL_RATE = room_speed*0.25;
global.DMG_THRESHOLDS[0] = 0.61;
global.DMG_THRESHOLDS[1] = 0.38;
global.DMG_THRESHOLDS[2] = 0.20;
global.MIN_DMG = 0.5;

//HUD constants
global.HBAR_X = 16;
global.HBAR_Y = 24;

//Use to change movement speed while still animating at 60fps
global.game_speed = 1.0;
//TODO: test if lerp-ing gives smoother experience
global.SLOMO_RATE = 0.11; //ease into slomo
global.SLOMO_MIN = 0.087;

//shitty GML library doesn't move tiles by abs position
global.tiles_x = 0;
global.tiles_y = 0;

//player tracker
global.player_id = 0;

//controls
global.brake_key = ord('Z');
global.acc_key = ord('X');
global.commandeer_key = ord('C');
global.options_key = ord('F');

//Set plane palettes
enum mk{ //TODO: add modifiers
    TINT_GREEN = 254,
    TINT_RED = 255
}

//AI ENUMS
enum ai_states{
    CHASING,
    FIRING,
    FLEEING,
    AVOIDING,
    RELOADING
};

//ai difficulty modifiers
global.spawn_cap = 0.0;

global.AI_TURN_REDUC = 0.65;
global.AI_SPEED_REDUC = 1.1;
global.AI_HP_REDUC = 0.8;
global.AI_SHOT_SP_REDUC = 0.5;
global.AI_SHOT_RANGE_REDUC = 0.9;
global.AI_SHOT_ACC_REDUC = 2.0;
global.AI_SHOT_RATE_REDUC = 1.4;

//skymine spawn deferral
global.skymine_queue = ds_list_create();

//initiallize particle system + particles
global.partsys = part_system_create();

global.b1_miss = part_type_create();
part_type_sprite(global.b1_miss, eff_b1_miss, true, true, false);
part_type_life(global.b1_miss, room_speed*0.25, room_speed*0.3);

global.flare1 = part_type_create();
part_type_sprite(global.flare1, eff_flare1, true, true, false);
part_type_life(global.flare1, room_speed*0.1, room_speed*0.15);

global.hit1 = part_type_create();
part_type_sprite(global.hit1, eff_hit1, true, true, false);
part_type_life(global.hit1, room_speed*0.2, room_speed*0.25);

global.charge = part_type_create();
part_type_sprite(global.charge, eff_charge, true, true, false);
part_type_size(global.charge,0.5,1.5,0,0);

global.boom_air = part_type_create();
part_type_sprite(global.boom_air, eff_boom_air, true, true, false);
part_type_life(global.boom_air, room_speed*0.5, room_speed*0.6);

global.explosion = part_type_create();
part_type_sprite(global.explosion, eff_explosion, true, true, false);
part_type_life(global.explosion, room_speed*0.6, room_speed*0.8);

global.dmg_ind[0] = part_type_create();
part_type_sprite(global.dmg_ind[0], eff_smoke_lt, true, true, false);
part_type_life(global.dmg_ind[0], room_speed*0.3, room_speed*0.5);
part_type_size(global.dmg_ind[0], 0.75, 2, 0, 0);

global.dmg_ind[1] = part_type_create();
part_type_sprite(global.dmg_ind[1], eff_smoke_dk, true, true, false);
part_type_life(global.dmg_ind[1], room_speed*0.3, room_speed*0.5);
part_type_size(global.dmg_ind[1], 1, 2.25, 0, 0);

global.dmg_ind[2] = part_type_create();
part_type_sprite(global.dmg_ind[2], eff_smoke_fire, true, true, false);
part_type_life(global.dmg_ind[2], room_speed*0.4, room_speed*0.6);
part_type_size(global.dmg_ind[2], 0.8, 1.5, 0, 0);

global.trail_far = part_type_create();
part_type_sprite(global.trail_far, eff_trail_far, true, true, false);
part_type_life(global.trail_far, room_speed*0.4, room_speed*0.4);

//shader globals
global.palette_texture = background_get_texture(bg_palette);
global.is_meter_ref = shader_get_uniform(shader_wedge_flash, "isMeter");

//DISPLAY/RESOLUTION MANAGER 
global.IDEAL_WIDTH = 540;
global.IDEAL_HEIGHT = 360;
global.FULLSCREEN_WIDTH = 0; //calculated in init views
global.FULLSCREEN_HEIGHT = 0;
view_xprev = 0; //for smoothing resolution changes
view_yprev = 0;
scr_init_views();
scr_set_res(0);
window_set_cursor(cr_none);
scr_set_level("level1");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///garbage collection

part_system_destroy(global.partsys);
part_type_destroy(global.b1_miss);

ds_map_destroy(global.plane_models);
if(global.curr_level_name!=""){
    ds_map_destroy(global.curr_level_data);
}
ds_list_destroy(global.skymine_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dequeue room change buffer
room_goto(asset_get_index("rm_"+global.next_level));
global.changing_levels = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load level
if(global.changing_levels){
    scr_load_level(global.next_level);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update previous view positions
if(window_get_fullscreen()){
    view_xprev = view_xview[0];
    view_yprev = view_yview[0];
}
else{
    view_xprev = view_xview[1];
    view_yprev = view_yview[1];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///'F' to toggle fullscreen
if(keyboard_check_pressed(global.options_key)){
    if(window_get_fullscreen()){
        scr_set_res(2);
    }
    else{
        scr_set_res(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Follow Camera

if(scr_instance_exists(global.player_id) &amp;&amp; global.next_level == ""){
    var d, cam_x, cam_y;
    
    // Remain in front of the player object
    with(global.player_id){
        if(object_index==obj_player){
            d = curr_speed-neutral_speed;
            cam_x = x+lengthdir_x(global.MAX_CAM_FOLLOW_DIST-8*sign(d)*sqr(d),direction);
            cam_y = y+lengthdir_y(global.MAX_CAM_FOLLOW_DIST-8*sign(d)*sqr(d),direction);
        }
        else{
            cam_x = x+lengthdir_x(global.MAX_CAM_FOLLOW_DIST,direction);
            cam_y = y+lengthdir_y(global.MAX_CAM_FOLLOW_DIST,direction);
        }
    }
    
    if(window_get_fullscreen()){
        //Center on camera
        view_xview[0]=lerp(view_xprev,cam_x-view_wview[0]/2,0.05);
        view_yview[0]=lerp(view_yprev,cam_y-view_hview[0]/2,0.05);
        
        //clamp to room
        view_xview[0]=clamp(view_xview[0],0,room_width-view_wview[0]);
        view_yview[0]=clamp(view_yview[0],0,room_height-view_hview[0]);
    }
    else{
        //Center on camera
        view_xview[1]=lerp(view_xprev,cam_x-view_wview[1]/2,0.05);
        view_yview[1]=lerp(view_yprev,cam_y-view_hview[1]/2,0.05);
        
        //clamp to room
        view_xview[1]=clamp(view_xview[1],0,room_width-view_wview[1]);
        view_yview[1]=clamp(view_yview[1],0,room_height-view_hview[1]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lerp-parallax
var tiles_xprev = global.tiles_x;
var tiles_yprev = global.tiles_y;

if(window_get_fullscreen()){
    global.tiles_x = lerp(0,room_width*(1-global.PARALLAX_FACTOR),view_xview[0]/(room_width-view_wview[0]));
    global.tiles_y = lerp(0,room_height*(1-global.PARALLAX_FACTOR),view_yview[0]/(room_height-view_hview[0]));
}
else{
    global.tiles_x = lerp(0,room_width*(1-global.PARALLAX_FACTOR),view_xview[1]/(room_width-view_wview[1]));
    global.tiles_y = lerp(0,room_height*(1-global.PARALLAX_FACTOR),view_yview[1]/(room_height-view_hview[1]));
}

tile_layer_shift(127, global.tiles_x-tiles_xprev, global.tiles_y-tiles_yprev);
tile_layer_shift(126, global.tiles_x-tiles_xprev, global.tiles_y-tiles_yprev);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update gameplay global vars
global.spawn_cap = 0.0;
for(var i = 0; i &lt; instance_number(obj_ship_parent); i++)
{
    var s = instance_find(obj_ship_parent,i);
    var t = variable_instance_get(s,"threat");
    if(t!=undefined){
        global.spawn_cap+=t;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
