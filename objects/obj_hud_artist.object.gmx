<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hud_artist</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables for drawing HUD
//sprite refs
hp_gauge_ref = spr_hp_gauge;
hp_icon_ref = spr_hp_icon;

//frame trackers for animated HUD elements
hp_ico_frame = 0;
hp_ico_img_speed = 0.25;

//hp values to track
max_hp = ds_map_find_value(global.models,"max_hp");
hp = max_hp;
target_hp = hp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate hp
if(scr_instance_exists(global.player_id)){
    if(variable_instance_exists(global.player_id,"hp")){
        //player is piloting plane
        target_hp = global.player_id.hp;
    }
    else if(variable_instance_exists(global.player_id,"target_id")){
        //player is jumping to enemy plane
        //hp = global.player_id.target_id.hp;
    }
}

if(target_hp&gt;hp){
    //slowly fill hp gauge up
    hp = min(hp+0.5, target_hp);
}
else{
    hp = target_hp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advance frame for animated UI
hp_ico_frame += hp_ico_img_speed;
if(hp_ico_frame&gt;=sprite_get_number(hp_icon_ref)){
    hp_ico_frame = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar
//actual bar
var amt = 100*hp/max_hp;
draw_healthbar(global.HBAR_X,global.HBAR_Y,global.HBAR_X+sprite_get_width(hp_gauge_ref)-5,global.HBAR_Y+sprite_get_height(hp_gauge_ref)-8,amt,c_black,c_purple,c_aqua,3,false,false);

//gauge overlay
draw_sprite(hp_gauge_ref,0,global.HBAR_X,global.HBAR_Y);

//heart icon
draw_sprite(hp_icon_ref,floor(hp_ico_frame),global.HBAR_X,global.HBAR_Y+sprite_get_height(hp_gauge_ref));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Flash

var c_prev = draw_get_colour();
var a_prev = draw_get_alpha();
global.flash_red_alpha = clamp(global.flash_red_alpha,0,1);
global.flash_blue_alpha = clamp(global.flash_blue_alpha,0,1);

//draw red for hit dmg
draw_set_colour(global.C_FLASH_RED);
draw_set_alpha(global.flash_red_alpha);
if(window_get_fullscreen()){
    draw_rectangle(0,0,view_wview[0],view_hview[0],false);
}
else{
    draw_rectangle(0,0,view_wview[1],view_hview[1],false);
}
global.flash_red_alpha -= global.FLASH_RED_ALPHA_DECAY;
//draw blue for commandeering
draw_set_colour(global.C_FLASH_BLUE);
draw_set_alpha(global.flash_blue_alpha);
if(window_get_fullscreen()){
    draw_rectangle(0,0,view_wview[0],view_hview[0],false);
}
else{
    draw_rectangle(0,0,view_wview[1],view_hview[1],false);
}
global.flash_blue_alpha -= global.FLASH_BLUE_ALPHA_DECAY;

global.flash_red_alpha = clamp(global.flash_red_alpha,0,1);
global.flash_blue_alpha = clamp(global.flash_blue_alpha,0,1);
draw_set_colour(c_prev);
draw_set_alpha(a_prev);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws UI that doesn't logically belong to any obj
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
