<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hud_artist</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables for drawing HUD
//sprite refs
hp_gauge_ref = spr_player_hp_gauge;
hp_bar_ref = spr_player_hp_bar;
progress_gauge_ref = spr_progress_gauge;
progress_bar_ref = spr_progress_bar;
city_warning_ref = spr_city_warning;

//frame trackers for animated HUD elements
warning_frame = 0;
warning_img_speed = 0.6;
warning_pos = -1;
warning_alarm = 0;

//hp values to track
max_hp = ds_map_find_value(global.planes,"max_hp");
hp = max_hp;
target_hp = hp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate hp
if(scr_instance_exists(global.player_id)){
    if(variable_instance_exists(global.player_id,"hp")){
        //player is piloting plane
        target_hp = global.player_id.hp;
    }
    else if(variable_instance_exists(global.player_id,"target_id")){
        //player is jumping to enemy plane
        //hp = global.player_id.target_id.hp;
    }
}

if(target_hp&gt;hp){
    //slowly fill hp gauge up
    hp = min(hp+0.5, target_hp);
}
else{
    hp = target_hp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advance frame for city warning

if(warning_alarm &gt; 0){
    warning_alarm--;
    
    warning_pos = scr_city_warning_move(city_warning_ref);
    if(is_array(warning_pos)){
        warning_frame += warning_img_speed;
        if(warning_frame&gt;=sprite_get_number(city_warning_ref)){
            warning_frame = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player's health bar
//actual bar
var amt = 100*hp/max_hp;
draw_healthbar(global.HBAR_X,global.HBAR_Y,global.HBAR_X+sprite_get_width(hp_gauge_ref)-5,global.HBAR_Y+sprite_get_height(hp_gauge_ref)-24,amt,c_black,global.C_MIN_BAR,global.C_MAX_BAR,3,false,false);

//gauge overlay
draw_sprite(hp_gauge_ref,0,global.HBAR_X,global.HBAR_Y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw progress bar

//gauge sprite (anchor to right side of screen)
var vc = scr_view_current();
var xpos = view_wview[vc]-sprite_get_width(progress_gauge_ref)+sprite_get_xoffset(progress_gauge_ref);
draw_sprite(progress_gauge_ref, 0, xpos, global.PBAR_Y);

//maximum progress bar
var prog = global.max_progress*sprite_get_width(progress_bar_ref);
draw_sprite_part_ext(progress_bar_ref,0,0,0,prog,sprite_get_height(progress_bar_ref),xpos,global.PBAR_Y,1,1,global.C_MIN_BAR,1);

//current progress bar
prog = global.progress*sprite_get_width(progress_bar_ref);
draw_sprite_part_ext(progress_bar_ref,0,0,0,prog,sprite_get_height(progress_bar_ref),xpos,global.PBAR_Y,1,1,global.C_MAX_BAR,1);

//progress text
var c_prev = draw_get_colour();

draw_set_font(global.fnt_4mini);
draw_set_valign(fa_top);
draw_set_halign(fa_right);
draw_set_colour(global.C_TEXT_LIGHT);
draw_text(xpos-4, global.PBAR_Y-1, string(round(global.progress*100))+"%");

draw_set_colour(c_prev);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw score

var xbor = 24;
var ybor = 16;
var c_prev = draw_get_colour();

draw_set_font(global.fnt_westington_m);
draw_set_valign(fa_top);
draw_set_halign(fa_right);

//RGB split fx: draw shadow
draw_set_colour(global.C_TEXT_SHADOW);
if(window_get_fullscreen()){
    //draw_text(view_wview[0]-xbor+2,ybor-2,score);
}
else{
    //draw_text(view_wview[1]-xbor+2,ybor-2,score);
}

//draw actual score
draw_set_colour(global.C_TEXT);
if(window_get_fullscreen()){
    //draw_text(view_wview[0]-xbor,ybor,score);
}
else{
    //draw_text(view_wview[1]-xbor,ybor,score);
}

draw_set_colour(c_prev);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Flash

var c_prev = draw_get_colour();
var a_prev = draw_get_alpha();
global.flash_red_alpha = clamp(global.flash_red_alpha,0,1);

//draw red for hit dmg
draw_set_colour(global.C_FLASH_RED);
draw_set_alpha(global.flash_red_alpha);
if(window_get_fullscreen()){
    draw_rectangle(0,0,view_wview[0],view_hview[0],false);
}
else{
    draw_rectangle(0,0,view_wview[1],view_hview[1],false);
}
global.flash_red_alpha -= global.FLASH_RED_ALPHA_DECAY;

global.flash_red_alpha = clamp(global.flash_red_alpha,0,1);
draw_set_colour(c_prev);
draw_set_alpha(a_prev);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw city's under attack warning

if(warning_alarm &gt; 0 &amp;&amp; is_array(warning_pos)){
    draw_sprite(city_warning_ref, warning_frame, warning_pos[0], warning_pos[1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws UI that doesn't logically belong to any obj
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
