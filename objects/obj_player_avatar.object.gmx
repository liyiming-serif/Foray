<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///error check on target id existence
if(!scr_instance_exists(target_id)){
    scr_set_level("level1");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///advance frame
if(image_index&lt;jump_frame &amp;&amp; scr_instance_exists(pid)){ //jump squat
    x = pid.x;
    y = pid.y;
}
//TODO: factor game_speed when predicting plane position
if(image_index&gt;=jump_frame &amp;&amp; !has_jumped){ //begin jump
    var target_coords, future;
    future = target_id.curr_speed*distance_to_object(target_id)/global.JUMP_SPEED;
    target_coords[0] = target_id.x+lengthdir_x(future,target_id.direction);
    target_coords[1] = target_id.y+lengthdir_y(future,target_id.direction);
    if(target_coords[1]&lt;y){
        sprite_index = spr_char_back;
    }
    else{
        sprite_index = spr_char;
    }
    
    og_image_speed = image_speed;
    move_towards_point(target_coords[0],target_coords[1],global.JUMP_SPEED);
    image_index = jump_frame;
    image_speed = min(1,(land_frame-jump_frame)/ceil(distance_to_point(target_coords[0],target_coords[1])/speed));
    image_angle = direction;
    if(sprite_index == spr_char){
        image_angle += 90;
    }
    else{
        image_angle -= 90;
    }
    has_jumped = true;
}
else if(image_index&gt;=land_frame &amp;&amp; !has_landed){ //begin land
    //global.flash_blue_alpha = 0.7;
    image_speed = og_image_speed;
    image_angle = 0;
    x = target_id.x;
    y = target_id.y;
    has_landed = true;
}
else if(image_index&gt;=land_frame){ //landing
    x = target_id.x;
    y = target_id.y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enter the commandeered plane
with(target_id){
    scr_plane_steal();
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
