<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constructor

//there can only be one.
if(instance_number(obj_cursor)&gt;1){
    instance_destroy(id,false);
}

image_speed = 0.4;
palette_ref = shader_get_sampler_index(shader_pal_swap, "palette");
row_ref = shader_get_uniform(shader_pal_swap, "row");
modifier = 0
rt_modifier = modifier;
l_bound_frame = 0;
u_bound_frame = 7;
flash_frame = 8;

//stealing controls
target_plane = 0; //inst id of the plane about to be stolen
target_prev = 0;
cid = 0; //child id of cursor frame

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Release steal button

instance_destroy(cid);
sprite_index = spr_cursor;
l_bound_frame = 0;
u_bound_frame = 7;
flash_frame = 8;
cid = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Advance frame
if(scr_instance_exists(global.player_id) &amp;&amp; global.player_id.sprite_index==spr_plane1_shoot){
    image_index = flash_frame;
}
else if(image_index&gt;u_bound_frame){
    image_index = l_bound_frame;
}
else if(image_index&lt;l_bound_frame){
    image_index = l_bound_frame;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update position

x = mouse_x;
y = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard controls

if(mouse_check_button(mb_right)){ //RMB to enter steal mode
    if(instance_number(obj_cursor_frame)==0){
        cid = instance_create(0,0,obj_cursor_frame);
        cid.pid = id;
        sprite_index = spr_c_cursor; 
        l_bound_frame = 0;
        u_bound_frame = 9;
    }
    
}
else{ //key release even when out of window
    if(scr_instance_exists(cid) &amp;&amp; !alarm[0]){
        alarm[0] = global.C_RECOVERY;
        cid.image_index = 1;
    }
}

if(mouse_check_button_released(mb_right)){ //steal plane
    if(scr_instance_exists(target_plane) &amp;&amp; target_plane.hp&gt;0 &amp;&amp; target_plane.on_target &amp;&amp; global.player_id.object_index==obj_player){
        with(global.player_id){
            scr_player_bail(other.target_plane);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate on_target

if(target_prev != target_plane){ //target changed since last frame
    if(scr_instance_exists(target_prev)){ //reset previous target's on target var
        target_prev.on_target = 0.0;
    }
}

if(scr_instance_exists(target_plane)&amp;&amp;is_array(target_plane.angles)&amp;&amp;scr_instance_exists(global.player_id)){
    /*var pa, da, ir;
    pa = point_direction(target_plane.x,target_plane.y,global.player_id.x,global.player_id.y);
    da = degtorad(angle_difference(pa,target_plane.image_angle));
    if(target_plane.angles[0]&gt;target_plane.angles[1]){
        ir = (da &gt;= target_plane.angles[0]) || (da &lt; target_plane.angles[1]);
    }
    else{
        ir = (da &gt;= target_plane.angles[0]) &amp;&amp; (da &lt; target_plane.angles[1]);
    }*/
    if(scr_is_obj_between_angles(global.player_id, target_plane)){
        target_plane.on_target = 1.0;
        rt_modifier = mk.TINT_GREEN/256.0;
    }
    else{
        target_plane.on_target = 0.0;
        rt_modifier = mk.TINT_RED/256.0;
    }
}
else{
    rt_modifier = modifier/256.0;
}

//slow down the action if on target to aid stealing
if(scr_instance_exists(target_plane) &amp;&amp; target_plane.on_target){
    global.game_speed = max(global.game_speed-global.SLOMO_RATE, global.SLOMO_MIN);
    if(instance_number(obj_statbox)==0){
        scr_statbox_create(global.player_id,target_plane);
        scr_statbox_create(target_plane,global.player_id);
    }
}
else{
    global.game_speed = min(global.game_speed+global.SLOMO_RATE, 1.0);
}

target_prev = target_plane;
//reset target for new frame
target_plane = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw cursor to GUI layer, applying shader
var d_pos;

shader_set(shader_pal_swap);
texture_set_stage(palette_ref, global.palette_texture);
shader_set_uniform_f(row_ref, rt_modifier);
d_pos = scr_game_to_gui(x,y);
draw_sprite(sprite_index,image_index,d_pos[0],d_pos[1]);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw square targets
return 0;
if(scr_instance_exists(target_plane)){
    var ind, t;
    ind = image_index mod sprite_get_number(spr_lockon);
    t = target_plane;
    if(t.on_target){ //lockon: green
        //top left
        draw_sprite_ext(spr_lockon,ind,t.x-t.sprite_xoffset,t.y-t.sprite_yoffset,1,1,0,c_white,1);
        //bottom left
        draw_sprite_ext(spr_lockon,ind,t.x+t.sprite_width-t.sprite_xoffset,target_plane.y-t.sprite_yoffset,1,1,270,c_white,1);
        //bottom right
        draw_sprite_ext(spr_lockon,ind,t.x+t.sprite_width-t.sprite_xoffset,target_plane.y+t.sprite_height-t.sprite_yoffset,1,1,180,c_white,1);
        //top right
        draw_sprite_ext(spr_lockon,ind,t.x-t.sprite_xoffset,target_plane.y+t.sprite_height-t.sprite_yoffset,1,1,90,c_white,1);
    }
    else{ //lockon: red
        //top left
        draw_sprite_ext(spr_lockoff,ind,t.x-t.sprite_xoffset,t.y-t.sprite_yoffset,1,1,0,c_white,1);
        //bottom left
        draw_sprite_ext(spr_lockoff,ind,t.x+t.sprite_width-t.sprite_xoffset,target_plane.y-t.sprite_yoffset,1,1,270,c_white,1);
        //bottom right
        draw_sprite_ext(spr_lockoff,ind,t.x+t.sprite_width-t.sprite_xoffset,target_plane.y+t.sprite_height-t.sprite_yoffset,1,1,180,c_white,1);
        //top right
        draw_sprite_ext(spr_lockoff,ind,t.x-t.sprite_xoffset,target_plane.y+t.sprite_height-t.sprite_yoffset,1,1,90,c_white,1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
