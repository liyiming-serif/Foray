<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_wpn_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load firing component(dir, wpn_name, is_friendly)

event_inherited();

//scr_c_repeater_add(cmp);
shoot_counter = 0;

//load parameters from JSON
var cmp = ds_map_find_value(mp, "c_repeater");
projectile_ind = asset_get_index(ds_map_find_value(cmp,"projectile_ind"));
dmg = ds_map_find_value(cmp, "dmg");
recoil = ds_map_find_value(cmp, "recoil");
shoot_rate = ds_map_find_value(cmp, "shoot_rate");
muzzle_vel = ds_map_find_value(cmp, "muzzle_vel");
accuracy = ds_map_find_value(cmp, "accuracy");
range[0] = ds_list_find_value(ds_map_find_value(cmp,"range"),0);
range[1] = ds_list_find_value(ds_map_find_value(cmp,"range"),1);
rounds = ds_map_find_value(cmp, "rounds");

reload_rate = ds_map_find_value(cmp, "reload_rate");
reload_rate = v;
reload_counter = reload_rate;
reload_counter_prev = reload_counter;

//optional parameters
var v = ds_map_find_value(mp,"sweep_angle");
if(v!=undefined){
    sweep_angle = v;
}
v = ds_map_find_value(mp,"muzzle_vel_var");
if(v!=undefined){
    muzzle_vel_var = v;
}
v = ds_map_find_value(cmp,"muzzle_flare");
if(v!=undefined){
    muzzle_flare = variable_global_get(v);
}
v = ds_map_find_value(cmp,"shoot_snd");
if(v!=undefined){
    //shoot_snd is string
    if(ds_exists(v, ds_type_list)){
        //sound group
        shoot_snd = ds_list_find_value(v,0);
        shoot_snd_num = ds_list_find_value(v,1);
    }
    else{
        //single sound
        shoot_snd = v;
    }
}
v = ds_map_find_value(cmp,"charge_snd");
if(v!=undefined){
    wpn_sound_emitter = audio_emitter_create();
    audio_emitter_falloff(wpn_sound_emitter,
        global.SOUND_FALLOFF_REF_DIST,
        global.SOUND_FALLOFF_MAX_DIST,
        global.SOUND_FALLOFF_FACTOR);
    charge_sound = audio_play_sound_on(
        wpn_sound_emitter,
        asset_get_index(v),
        true,
        0);
}
v = ds_map_find_value(cmp,"charge_part");
if(v!=undefined){
    charge_part = variable_global_get(ds_list_find_value(v,0));
    charge_part_life[0] = ds_list_find_value(v,1);
    charge_part_life[1] = ds_list_find_value(v,2);
    charge_part_frames = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up audio

audio_stop_sound(charge_sound);
audio_emitter_free(wpn_sound_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update linear and angular velocity
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///play or pause charging sound

if(audio_is_playing(charge_sound)){
    if(reload_counter_prev != reload_counter){
        audio_resume_sound(charge_sound);
    }
    else{
        audio_pause_sound(charge_sound);
    }
}

reload_counter_prev = reload_counter;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
