<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_plane1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_plane_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Advance frame
scr_plane_advance_frame();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard + mouse controls

if(hp&lt;=0 || !has_pilot || id!=global.player_id) {
    //NOTE: return exits the whole event, not just the code block
    scr_plane_idle();
    return undefined;
}

//buckling dampens turning and disables keyboard+firing
if(sprite_index==spr_plane1_buckle){
    scr_plane_turn(mouse_x, mouse_y, false,global.C_TURN_DAMPENER);
    return undefined;
}

//rolling
if(keyboard_check_pressed(global.roll_key)){
    scr_plane_roll();
}

//boosting and braking
if(keyboard_check(global.brake_key)){
    scr_plane_brake();
}
else if(keyboard_check(global.boost_key)){
    scr_plane_boost();
}
else{
    scr_plane_neutral();
}

//stealing dampens turns and disables firing
if(mouse_check_button(mb_right)){
    scr_plane_turn(mouse_x, mouse_y, false,global.C_TURN_DAMPENER);
    return undefined;
}

//turn towards mouse pointer
scr_plane_turn(mouse_x, mouse_y, false);

//'LMB' to shoot
if(!is_rolling){
    if(mouse_check_button_pressed(mb_left)){
        scr_plane_shoot("on_click");
    }
    if(mouse_check_button(mb_left)){
        scr_plane_shoot("pressed");
    }
    if(mouse_check_button_released(mb_left)){
        scr_plane_shoot("on_release");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ship_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hack contact dmg

scr_player_contact_hit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finish death seq if out of hp; end buckle anim

event_inherited();
if(hp&lt;=0){
    if(global.player_id==id){
        scr_set_level("level1");
    }
    else{
        instance_destroy();
        scr_ground_particle_create(x, y, global.boom_air);
    }
}
else if(sprite_index==spr_plane1_buckle){
    sprite_index = spr_plane1;
    if(!has_pilot){
        var pa = point_direction(x,y,global.player_id.x,global.player_id.y);
        scr_plane_gen_weakspot(degtorad(angle_difference(pa,image_angle)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug statements
event_inherited();

c_pos = scr_game_to_gui(x-48, y+48);
s_pos = scr_game_to_gui(x+48, y+48);
u_pos = scr_game_to_gui(x+48, y-48);
l_pos = scr_game_to_gui(x-48, y-48);

c_mess = string(round(image_index));
s_mess = string(image_speed);
u_mess = string(u_bound_frame);
l_mess = string(l_bound_frame);

draw_text_colour(c_pos[0],c_pos[1],c_mess,c_teal,c_teal,c_teal,c_teal,1);
draw_text_colour(s_pos[0],s_pos[1],s_mess,c_teal,c_teal,c_teal,c_teal,1);
draw_text_colour(u_pos[0],u_pos[1],u_mess,c_teal,c_teal,c_teal,c_teal,1);
draw_text_colour(l_pos[0],l_pos[1],l_mess,c_teal,c_teal,c_teal,c_teal,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
